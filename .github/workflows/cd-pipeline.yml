name: CD Pipeline

on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  gradle-build:
    name: Gradle Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # jwt 정보 로딩
      - name: Copy Secret
        env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET }}
          OCCUPY_SECRET_DIR: src/main/resources
          OCCUPY_SECRET_DIR_FILE_NAME: application-config.properties
        run: echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME

      # dev 정보 로딩
      - name: Copy Secret1
        env:
          OCCUPY_SECRET1: ${{ secrets.OCCUPY_SECRET1 }}
          OCCUPY_SECRET1_DIR: src/main/resources
          OCCUPY_SECRET1_DIR_FILE_NAME: application-dev.properties
        run: echo $OCCUPY_SECRET1 | base64 --decode > $OCCUPY_SECRET1_DIR/$OCCUPY_SECRET1_DIR_FILE_NAME

      # redis 정보 로딩
      - name: Copy Secret2
        env:
          OCCUPY_SECRET2: ${{ secrets.OCCUPY_SECRET2 }}
          OCCUPY_SECRET2_DIR: src/main/resources
          OCCUPY_SECRET2_DIR_FILE_NAME: application-redis.properties
        run: echo $OCCUPY_SECRET2 | base64 --decode > $OCCUPY_SECRET2_DIR/$OCCUPY_SECRET2_DIR_FILE_NAME

      # elasticsearch 정보 로딩
      - name: Copy Secret3
        env:
          OCCUPY_SECRET3: ${{ secrets.OCCUPY_SECRET3 }}
          OCCUPY_SECRET3_DIR: src/main/resources
          OCCUPY_SECRET3_DIR_FILE_NAME: application-elasticsearch.properties
        run: echo $OCCUPY_SECRET3 | base64 --decode > $OCCUPY_SECRET3_DIR/$OCCUPY_SECRET3_DIR_FILE_NAME

      # 도커 환경 init
      - name: Env Set Using Docker
        run: docker-compose -f docker-compose.redis.yml up -d
      - name: Run ElasticSearch
        run: docker run -d -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.10.1

      # gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle 빌드 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean build -x test

      # 임시 저장
      - name: Temporarily save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build
          retention-days: 1

  build-docker-image:
    needs: gradle-build
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    steps:
      # 임시 저장 결과 로딩
      - uses: actions/checkout@v2
      - name: Retrieve built
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: build

      # 도커 허브 로그인
      - name: Docker Hub Sign-in
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      # 도커 이미지 빌드
      - name: Building Docker Image
        run: docker build --build-arg JAR_FILE=build/libs/\*.jar -t ${{ secrets.DOCKERHUB_USERNAME }}/hanbange .

      # 도커 이미지 푸시
      - name: Publish Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME  }}/hanbange

  deploy:
    needs: build-docker-image
    name: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        
        # docker-compose 파일 배포
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/"

        # docker-compose 파일 실행
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            docker rm -f $(docker ps -qa)
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f
